if (Model.SelectionCount === 0) {
  alert("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å —Å –ø–∞–∑–∞–º–∏.");
} else {
  let totalLength = 0;
  let totalCount = 0;

  for (let i = 0; i < Model.SelectionCount; i++) {
    const obj = Model.Selections[i];
    if (obj instanceof TFurnPanel) {
      const panel = obj;

      const cuts = panel.Cuts;
      if (cuts && cuts.Count > 0) {
        for (let j = 0; j < cuts.Count; j++) {
          const cut = cuts[j];
          totalCount++;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—É—Ä –ø–∞–∑–∞
          if (cut.Contour && cut.Contour.Objects && cut.Contour.Objects.Count > 0) {
            for (let k = 0; k < cut.Contour.Objects.Count; k++) {
              const line = cut.Contour.Objects[k];
              try {
                if (line.Length && line.Length > 0) {
                  totalLength += line.Length;
                } else if (line.Width && line.Width > 0) {
                  totalLength += line.Width;
                }
              } catch {}
            }
          }
          // –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç—É—Ä–∞ ‚Äî –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —à–∏—Ä–∏–Ω—É –∏–ª–∏ –¥–ª–∏–Ω—É –Ω–∞–ø—Ä—è–º—É—é
          else if (cut.Width && cut.Width > 0) {
            totalLength += cut.Width;
          } else if (cut.Length && cut.Length > 0) {
            totalLength += cut.Length;
          }
        }
      }
    }
  }

  if (totalCount === 0) {
    alert("–ü–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª—è—Ö.");
  } else {
    alert(
      "üîπ –ù–∞–π–¥–µ–Ω–æ –ø–∞–∑–æ–≤: " + totalCount + "\n" +
      "üìè –û–±—â–∞—è –¥–ª–∏–Ω–∞ –ø–∞–∑–æ–≤: " + totalLength.toFixed(2) + " –º–º"
    );
  }
}
