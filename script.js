// –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–π –¥–ª–∏–Ω—ã –≤—Å–µ—Ö –ø–∞–∑–æ–≤ (Cuts) –Ω–∞ –ø–∞–Ω–µ–ª–∏, –≤–∫–ª—é—á–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞

let totalLength = 0;
let totalCuts = 0;

function getCutLength(cut) {
  let len = 0;

  try {
    // üîπ –ï—Å–ª–∏ —É –ø–∞–∑–∞ –µ—Å—Ç—å –ø—Ä—è–º–∞—è –¥–ª–∏–Ω–∞ (—á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è)
    if (cut.Trajectory && typeof cut.Trajectory.Length === "number") {
      len += cut.Trajectory.Length;
    }
    // üîπ –ï—Å–ª–∏ —É –ø–∞–∑–∞ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ (—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ª–∏–Ω–∏–π, –¥—É–≥ –∏ —Ç.–¥.)
    else if (cut.Trajectory && cut.Trajectory.Objects && cut.Trajectory.Objects.Count > 0) {
      for (let i = 0; i < cut.Trajectory.Objects.Count; i++) {
        const obj = cut.Trajectory.Objects[i];
        if (obj instanceof TLine3D) {
          const dx = obj.P2.x - obj.P1.x;
          const dy = obj.P2.y - obj.P1.y;
          const dz = obj.P2.z - obj.P1.z;
          len += Math.sqrt(dx * dx + dy * dy + dz * dz);
        } else if (obj instanceof TArc3D) {
          len += Math.abs(obj.Radius * obj.Angle);
        } else if (typeof obj.Length === "number") {
          len += obj.Length;
        }
      }
    }
    // üîπ –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —É —Å–∞–º–æ–≥–æ Cut –µ—Å—Ç—å Length
    else if (typeof cut.Length === "number") {
      len += cut.Length;
    }
  } catch (e) {
    // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  }

  return len;
}

function processPanel(panel) {
  if (!panel.Cuts || panel.Cuts.Count === 0) return;

  for (let i = 0; i < panel.Cuts.Count; i++) {
    const cut = panel.Cuts[i];
    const len = getCutLength(cut);
    totalLength += len;
    totalCuts++;
  }
}

function searchInList(list) {
  for (let i = 0; i < list.Count; i++) {
    const obj = list[i];
    if (obj instanceof TFurnPanel) {
      processPanel(obj);
    } else if (obj.AsList) {
      searchInList(obj);
    }
  }
}

if (Model.SelectionCount > 0) {
  for (let i = 0; i < Model.SelectionCount; i++) {
    const obj = Model.Selections[i];
    if (obj instanceof TFurnPanel) {
      processPanel(obj);
    } else if (obj.AsList) {
      searchInList(obj);
    }
  }
} else {
  Model.forEachPanel(panel => processPanel(panel));
}

if (totalCuts > 0) {
  alert(`–ù–∞–π–¥–µ–Ω–æ –ø–∞–∑–æ–≤: ${totalCuts}\n–û–±—â–∞—è –¥–ª–∏–Ω–∞: ${totalLength.toFixed(2)} –º–º`);
} else {
  alert("–ü–∞–∑—ã (–≤—ã—Ä–µ–∑—ã) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ AddCut().");
}
