// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–∞–∑–æ–≤ –ø–∞–Ω–µ–ª–∏ –≤ –ë–ê–ó–ò–°
// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞–∑–∞, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Å—á–∏—Ç–∞—Ç—å –¥–ª–∏–Ω—É

if (Model.SelectionCount === 0) {
  alert("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å.");
} else {
  let found = false;

  for (let i = 0; i < Model.SelectionCount; i++) {
    const obj = Model.Selections[i];

    if (obj instanceof TFurnPanel) {
      const panel = obj;

      if (panel.Cuts && panel.Cuts.Count > 0) {
        found = true;
        const cut = panel.Cuts[0];

        let info = "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤–æ–º –ø–∞–∑–µ –ø–∞–Ω–µ–ª–∏ '" + panel.Name + "'\n\n";
        info += "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: " + (cut.ClassName || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") + "\n";
        info += "–í—Å–µ–≥–æ –ø–∞–∑–æ–≤ –Ω–∞ –ø–∞–Ω–µ–ª–∏: " + panel.Cuts.Count + "\n\n";

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        info += "=== –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ Cut ===\n";
        for (let key in cut) {
          try {
            let value = cut[key];
            if (typeof value === "object") value = "[object]";
            info += key + " = " + value + "\n";
          } catch (e) {
            info += key + " = (–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏)\n";
          }
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º Trajectory
        if (cut.Trajectory) {
          info += "\n=== Trajectory ===\n";
          try {
            info += "Trajectory.Length = " + cut.Trajectory.Length + "\n";
            info += "Trajectory.Objects.Count = " + (cut.Trajectory.Objects ? cut.Trajectory.Objects.Count : 0) + "\n";
          } catch (e) {
            info += "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Trajectory\n";
          }

          if (cut.Trajectory.Objects && cut.Trajectory.Objects.Count > 0) {
            info += "\n--- Trajectory.Objects ---\n";
            for (let i = 0; i < cut.Trajectory.Objects.Count; i++) {
              let obj = cut.Trajectory.Objects[i];
              info += "[" + i + "] —Ç–∏–ø: " + (obj.ClassName || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") + "\n";
              for (let k in obj) {
                try {
                  let v = obj[k];
                  if (typeof v === "object") v = "[object]";
                  info += "  " + k + " = " + v + "\n";
                } catch (e) {
                  info += "  " + k + " = (–æ—à–∏–±–∫–∞)\n";
                }
              }
              info += "\n";
            }
          }
        } else {
          info += "\nTrajectory –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n";
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º Contour
        if (cut.Contour) {
          info += "\n=== Contour ===\n";
          try {
            info += "Contour.Objects.Count = " + (cut.Contour.Objects ? cut.Contour.Objects.Count : 0) + "\n";
          } catch (e) {
            info += "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Contour\n";
          }

          if (cut.Contour.Objects && cut.Contour.Objects.Count > 0) {
            info += "\n--- Contour.Objects ---\n";
            for (let i = 0; i < cut.Contour.Objects.Count; i++) {
              let obj = cut.Contour.Objects[i];
              info += "[" + i + "] —Ç–∏–ø: " + (obj.ClassName || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") + "\n";
              for (let k in obj) {
                try {
                  let v = obj[k];
                  if (typeof v === "object") v = "[object]";
                  info += "  " + k + " = " + v + "\n";
                } catch (e) {
                  info += "  " + k + " = (–æ—à–∏–±–∫–∞)\n";
                }
              }
              info += "\n";
            }
          }
        } else {
          info += "\nContour –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n";
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (—á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞–ª–æ alert)
        system.askWriteTextFile("txt", info);
        alert("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–∞–∑–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–ü—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ‚Äî —è —Å–∫–∞–∂—É, –∫–∞–∫ —Å—á–∏—Ç–∞—Ç—å –¥–ª–∏–Ω—É.");
        break;
      }
    }
  }

  if (!found) {
    alert("–ü–∞–Ω–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞, –Ω–æ –ø–∞–∑—ã (Cuts) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
  }
}
