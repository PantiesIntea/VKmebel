let totalWidth = 0;
let totalCuts = 0;
let debug = "";

// === –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞–Ω–µ–ª–µ–π ===
function searchPanels(obj) {
  if (!obj) return;

  if (obj instanceof TFurnPanel) {
    processPanel(obj);
  } else if (obj.AsList) {
    for (let i = 0; i < obj.Count; i++) {
      searchPanels(obj[i]);
    }
  }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–µ–ª–∏ ===
function processPanel(panel) {
  const cuts = panel.Cuts;
  if (!cuts || cuts.Count === 0) return;

  for (let i = 0; i < cuts.Count; i++) {
    const cut = cuts[i];
    let cutWidth = 0;

    if (cut.Contour && cut.Contour.Objects && cut.Contour.Objects.Count > 0) {
      for (let j = 0; j < cut.Contour.Objects.Count; j++) {
        const obj = cut.Contour.Objects[j];
        if (obj.Width && obj.Width > 0) {
          cutWidth += obj.Width;
        }
      }
    }

    if (cutWidth > 0) {
      totalCuts++;
      totalWidth += cutWidth;
      debug += `–ü–∞–Ω–µ–ª—å: ${panel.Name}\n–ü–∞–∑: ${cut.Name}\n–®–∏—Ä–∏–Ω–∞: ${cutWidth.toFixed(2)} –º–º\n\n`;
    }
  }
}

// === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
if (Model.SelectionCount > 0) {
  for (let i = 0; i < Model.SelectionCount; i++) {
    const sel = Model.Selections[i];
    if (sel instanceof TFurnPanel) {
      processPanel(sel);
    } else if (sel.AsList) {
      searchPanels(sel);
    }
  }
} else {
  // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ –≤—Å–µ–π –º–æ–¥–µ–ª–∏
  Model.forEachPanel(panel => processPanel(panel));
}

// === –†–µ–∑—É–ª—å—Ç–∞—Ç ===
if (totalCuts === 0) {
  alert("‚ùå –ü–∞–∑—ã (–≤—ã—Ä–µ–∑—ã) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –µ—Å—Ç—å AddCut().");
} else {
  alert(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞–∑–æ–≤: ${totalCuts}\nüìè –û–±—â–∞—è –¥–ª–∏–Ω–∞ (—à–∏—Ä–∏–Ω–∞) –ø–∞–∑–æ–≤: ${totalWidth.toFixed(2)} –º–º\n\n${debug}`);
}
