// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–∑–æ–≤ –ø–∞–Ω–µ–ª–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–ª–∏–Ω—ã

let totalLength = 0;
let totalCuts = 0;

// –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã –æ–¥–Ω–æ–≥–æ –ø–∞–∑–∞ –ø–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
function getCutLength(cut) {
  if (!cut.Trajectory || cut.Trajectory.Objects.Count === 0) return 0;

  let length = 0;
  for (let i = 0; i < cut.Trajectory.Objects.Count; i++) {
    const obj = cut.Trajectory.Objects[i];

    if (obj instanceof TLine3D) {
      // –ü—Ä—è–º–∞—è –ª–∏–Ω–∏—è
      const dx = obj.P2.x - obj.P1.x;
      const dy = obj.P2.y - obj.P1.y;
      const dz = obj.P2.z - obj.P1.z;
      length += Math.sqrt(dx * dx + dy * dy + dz * dz);
    } else if (obj instanceof TArc3D) {
      // –î—É–≥–∞
      length += Math.abs(obj.Radius * obj.Angle);
    } else {
      // –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–ª–∞–π–Ω—ã)
      try {
        length += obj.Length;
      } catch (e) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ Length
      }
    }
  }
  return length;
}

if (Model.SelectionCount === 0) {
  alert("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å –≤ –º–æ–¥–µ–ª–∏.");
} else {
  let foundPanel = false;

  for (let i = 0; i < Model.SelectionCount; i++) {
    const obj = Model.Selections[i];
    if (obj instanceof TFurnPanel) {
      foundPanel = true;
      const panel = obj;

      let info = "üìò –ü–∞–Ω–µ–ª—å: " + panel.Name + "\n";

      const collections = ["Cuts", "PanelCuts", "Operations", "Features", "Contours", "Objects", "Children"];

      let foundSomething = false;

      for (let name of collections) {
        try {
          const c = panel[name];
          if (c && typeof c.Count === "number" && c.Count > 0) {
            foundSomething = true;
            info += `\n=== ${name} (${c.Count}) ===\n`;

            for (let j = 0; j < c.Count; j++) {
              const item = c[j];
              info += `[${j}] ${item.ClassName || "–±–µ–∑ —Ç–∏–ø–∞"}\n`;

              // –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              const keys = ["Name", "Type", "Length", "Depth", "Width", "Thickness"];
              for (let k of keys) {
                try {
                  if (typeof item[k] !== "undefined") {
                    info += `   ${k}: ${item[k]}\n`;
                  }
                } catch {}
              }

              // –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è ‚Äî —Å—á–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É
              try {
                if (item.Trajectory) {
                  const len = getCutLength(item);
                  totalLength += len;
                  totalCuts++;
                  info += `   Trajectory.Length: ${len.toFixed(2)} –º–º\n`;
                  if (item.Trajectory.Objects && item.Trajectory.Objects.Count > 0) {
                    info += `   Trajectory.Objects.Count: ${item.Trajectory.Objects.Count}\n`;
                  }
                }
              } catch {}

              // –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç—É—Ä ‚Äî –ø–æ–∫–∞–∂–µ–º –µ–≥–æ
              try {
                if (item.Contour && item.Contour.Objects) {
                  info += `   Contour.Objects.Count: ${item.Contour.Objects.Count}\n`;
                }
              } catch {}
            }
          }
        } catch (e) {
          info += `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ${name}\n`;
        }
      }

      if (!foundSomething) {
        info += "\n‚ùå –ü–æ—Ö–æ–∂–µ, –ø–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–≤–æ–π—Å—Ç–≤–µ –ø–∞–Ω–µ–ª–∏.";
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (totalCuts > 0) {
        info += `\nüìè –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∑–æ–≤: ${totalCuts}\nüìè –û–±—â–∞—è –¥–ª–∏–Ω–∞ –ø–∞–∑–æ–≤: ${totalLength.toFixed(2)} –º–º`;
      }

      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      alert(info.length > 1000 ? info.substring(0, 1000) + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)" : info);
      break;
    }
  }

  if (!foundPanel) {
    alert("–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–Ω–µ–ª—å—é.");
  }
}
