// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–Ω–µ–ª–∏ –≤ Bazis Script
// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–∞–∑—ã, –≤—ã—Ä–µ–∑—ã –∏ –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

if (Model.SelectionCount === 0) {
  alert("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å –≤ –º–æ–¥–µ–ª–∏.");
} else {
  let foundPanel = false;

  for (let i = 0; i < Model.SelectionCount; i++) {
    const obj = Model.Selections[i];
    if (obj instanceof TFurnPanel) {
      foundPanel = true;
      const panel = obj;
      let info = "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–Ω–µ–ª–∏ '" + panel.Name + "'\n\n";

      info += "=== –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∞–Ω–µ–ª–∏ ===\n";
      for (let key in panel) {
        try {
          let val = panel[key];
          if (typeof val === "object") {
            if (val && typeof val.Count === "number") {
              info += `${key} = [object, Count=${val.Count}]\n`;
            } else {
              info += `${key} = [object]\n`;
            }
          } else {
            info += `${key} = ${val}\n`;
          }
        } catch (e) {
          info += `${key} = (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è)\n`;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
      const possibleCollections = [
        "Cuts", "PanelCuts", "Operations", "Features", "Contours", "Objects", "Children"
      ];

      info += "\n\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π ===\n";
      for (let name of possibleCollections) {
        try {
          const c = panel[name];
          if (c && typeof c.Count === "number") {
            info += `${name}: Count = ${c.Count}\n`;

            for (let j = 0; j < c.Count; j++) {
              const item = c[j];
              info += `  [${j}] —Ç–∏–ø = ${item.ClassName || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`;

              // –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
              for (let k in item) {
                try {
                  if (["Name", "Type", "Length", "Depth", "Width"].includes(k)) {
                    info += `    ${k} = ${item[k]}\n`;
                  }
                } catch {}
              }
            }
          } else {
            info += `${name}: –Ω–µ—Ç –∏–ª–∏ Count = 0\n`;
          }
        } catch (e) {
          info += `${name}: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞\n`;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
      system.askWriteTextFile("txt", info);
      alert("–§–∞–π–ª —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø–∞–Ω–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–ü—Ä–∏—à–ª–∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ‚Äî —è —Å–∫–∞–∂—É, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–∞–∑—ã.");
      break;
    }
  }

  if (!foundPanel) {
    alert("–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–Ω–µ–ª—å—é.");
  }
}
