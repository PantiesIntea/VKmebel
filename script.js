// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–∑–æ–≤ –ø–∞–Ω–µ–ª–∏ (–≤—Å—ë –≤ alert)

if (Model.SelectionCount === 0) {
  alert("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å –≤ –º–æ–¥–µ–ª–∏.");
} else {
  let foundPanel = false;

  for (let i = 0; i < Model.SelectionCount; i++) {
    const obj = Model.Selections[i];
    if (obj instanceof TFurnPanel) {
      foundPanel = true;
      const panel = obj;

      let info = "üìò –ü–∞–Ω–µ–ª—å: " + panel.Name + "\n";

      const collections = [
        "Cuts", "PanelCuts", "Operations", "Features", "Contours", "Objects", "Children"
      ];

      let foundSomething = false;

      for (let name of collections) {
        try {
          const c = panel[name];
          if (c && typeof c.Count === "number" && c.Count > 0) {
            foundSomething = true;
            info += `\n=== ${name} (${c.Count}) ===\n`;

            for (let j = 0; j < c.Count; j++) {
              const item = c[j];
              info += `[${j}] ${item.ClassName || "–±–µ–∑ —Ç–∏–ø–∞"}\n`;

              // –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              const keys = ["Name", "Type", "Length", "Depth", "Width", "Thickness"];
              for (let k of keys) {
                try {
                  if (typeof item[k] !== "undefined") {
                    info += `   ${k}: ${item[k]}\n`;
                  }
                } catch {}
              }

              // –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è ‚Äî –ø–æ–∫–∞–∂–µ–º –µ—ë
              try {
                if (item.Trajectory) {
                  info += `   Trajectory.Length: ${item.Trajectory.Length}\n`;
                  if (item.Trajectory.Objects && item.Trajectory.Objects.Count > 0) {
                    info += `   Trajectory.Objects.Count: ${item.Trajectory.Objects.Count}\n`;
                  }
                }
              } catch {}

              // –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç—É—Ä ‚Äî –ø–æ–∫–∞–∂–µ–º –µ–≥–æ
              try {
                if (item.Contour && item.Contour.Objects) {
                  info += `   Contour.Objects.Count: ${item.Contour.Objects.Count}\n`;
                }
              } catch {}
            }
          }
        } catch (e) {
          info += `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ${name}\n`;
        }
      }

      if (!foundSomething) {
        info += "\n‚ùå –ü–æ—Ö–æ–∂–µ, –ø–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–≤–æ–π—Å—Ç–≤–µ –ø–∞–Ω–µ–ª–∏.";
      }

      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      alert(info.length > 1000 ? info.substring(0, 1000) + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)" : info);
      break;
    }
  }

  if (!foundPanel) {
    alert("–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–Ω–µ–ª—å—é.");
  }
}
